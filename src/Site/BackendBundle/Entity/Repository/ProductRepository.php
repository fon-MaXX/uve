<?php

namespace Site\BackendBundle\Entity\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function getProductsIndexByCode(){
        $q =  $this->createQueryBuilder('p','p.cod')
            ->getQuery()
            ->getResult();
        $result=[];
        if($q){
            foreach($q as $k=>$item){
                $k = trim(mb_strtolower($k,'UTF-8'));
                $result[$k] = $item;
            }
        }
        return $result;
    }
    public function getAllSortedByCod(){
        return $this->createQueryBuilder('p')
            ->orderBy('p.cod', 'ASC')
            ->getQuery();
    }
//    product-list filter method
    public function getForProductList(array $params, array $config,$id, $subCategoryId=null){
        $query = $this->createQueryBuilder('p')
            ->select('p,sc,c,sh')
            ->leftJoin('p.subCategory','sc')
            ->leftJoin('p.shareTags','sh')
            ->leftJoin('sc.category','c');
            if($subCategoryId){
                $query
                    ->where('sc.id = :id')
                    ->setParameter('id',$subCategoryId);
            }
            else{
                $query
                    ->where('c.id = :catId')
                    ->setParameter('catId',$id);
            }
        $query
            ->andWhere('p.state != :state')
            ->setParameter('state','только в наборе');
        if(isset($params['range'])&&$params['range']){
            $query->andWhere('p.filterPrice > :min')
                ->andWhere('p.filterPrice < :max')
                ->setParameter('min',(int)$params['range']['min'])
                ->setParameter('max',(int)$params['range']['max']);
        }
        if(isset($params['insertionType'])&&$params['insertionType']&&isset($config['insertionType'])){
            $insertionType = $config['insertionType'];
            $conditions = [];
            foreach($params['insertionType'] as $item){
                if($insertionType[$item]=='Без вставки'){
                    $conditions[] = $query->expr()->isNull('p.insertionType');
                }
                else{
                    $conditions[] = $query->expr()->like('p.insertionType', $query->expr()->literal('%'.$insertionType[$item].'%'));
                }
            }
            $orX = $query->expr()->orX();
            $orX->addMultiple($conditions);
            $query->andWhere($orX);
        }
        if(isset($params['state'])&&$params['state']&&$config['state']){
            $state = $config['state'];
            $conditions = [];
            foreach($params['state'] as $item){
                $conditions[] = $query->expr()->like('p.state', $query->expr()->literal('%'.$state[$item].'%'));
            }
            $orX = $query->expr()->orX();
            $orX->addMultiple($conditions);
            $query->andWhere($orX);
        }
        if(isset($params['theme'])&&$params['theme']&&$config['theme']){
            $theme = $config['theme'];
            $conditions = [];
            foreach($params['theme'] as $item){
                $conditions[] = $query->expr()->like('p.theme', $query->expr()->literal('%'.$theme[$item].'%'));
            }
            $orX = $query->expr()->orX();
            $orX->addMultiple($conditions);
            $query->andWhere($orX);
        }

        if(isset($params['subCategory'])&&$params['subCategory']){
            $query->andWhere('sc.id IN (:ids)')
                ->setParameter('ids',$params['subCategory']);
        }
        if(isset($params['chainSizes'])&&$params['chainSizes']&&isset($config['chainSizes'])){
            $chainSizes = $config['chainSizes'];
            $conditions = [];
            $query->leftJoin('p.chainSizes','chs');
            foreach($params['chainSizes'] as $item){
                $conditions[] = $query->expr()->like('chs.title', $query->expr()->literal('%'.$chainSizes[$item].'%'));
            }
            $orX = $query->expr()->orX();
            $orX->addMultiple($conditions);
            $query->andWhere($orX);
        }
        if(
            !count($params)||
            (isset($params['sort'])&&$params['sort']=='popular')
        ){
            $query->orderBy('p.rating','DESC');
        }
        elseif($params['sort']){
            ($params['sort']=='cheapest')?$query->orderBy('p.filterPrice','ASC'):$query->orderBy('p.title','ASC');
        }
        return $query->getQuery();
    }
    public function getOneWithCategoryAndSubCategory($slug){
        return $this->createQueryBuilder('p')
            ->leftJoin('p.subCategory','sc')
            ->leftJoin('sc.category','c')
            ->leftJoin('p.productGallery','g')
            ->where('p.slug = :slug')
            ->setParameter('slug',$slug)
            ->getQuery()
            ->getOneOrNullResult()
            ;
    }
    public function getLastByTagAndNumber($tagTitle,$number){
        return $this->createQueryBuilder('p')
            ->leftJoin('p.shareTags','shT')
            ->where('shT.title = :title')
            ->andWhere('p.state != :state')
            ->setParameter('title',$tagTitle)
            ->setParameter('state','только в наборе')
            ->orderBy('p.rating','DESC')
            ->setMaxResults($number)
            ->getQuery()
            ->getResult()
            ;
    }
    public function getByAndIndexIdsForGetFromSession($ids){
        $products = $this->createQueryBuilder('s')
            ->select('s, ringSizes, insertionColors, chainSizes')
            ->where('s.id IN (:ids)')
            ->leftJoin('s.ringSizes','ringSizes')
            ->leftJoin('s.insertionColors','insertionColors')
            ->leftJoin('s.chainSizes','chainSizes')
            ->setParameter('ids',$ids)
            ->getQuery()
            ->getResult();

        $resultProducts = [];
        foreach ($products as $product) {
            $resultProducts[$product->getId()] = $product;
        }

        return $resultProducts;
    }
    public function getByAndIndexIds($ids){
        return $this->createQueryBuilder('p','p.id')
            ->where('p.id IN (:ids)')
            ->setParameter('ids',$ids)
            ->getQuery()
            ->getResult();
    }
    public function getAllBySubCategoryId($id){
        return $this->createQueryBuilder('p')
            ->leftJoin('p.subCategory','sc')
            ->where('sc.id = :id')
            ->setParameter('id',$id)
            ->orderBy('p.cod','ASC')
            ->getQuery()
            ->getResult();
    }
    public function search($title){
        $options = explode(' ',$title);
        if(count($options)>1){
            $queryBuilder = $this->createQueryBuilder('a')
                ->select('a,sh')
                ->leftJoin('a.shareTags','sh')
            ;
            $conditions = [];
            foreach ($options as $optionKey => $option) {
                $conditions[] = $queryBuilder->expr()->like('a.title', $queryBuilder->expr()->literal('%'.$option.'%'));
            }
            $conditions[] = $queryBuilder->expr()->neq('a.state', $queryBuilder->expr()->literal('только в наборе'));
            $andX = $queryBuilder->expr()->andX();
            $andX->addMultiple($conditions);
            $queryBuilder->andWhere($andX);
            return $queryBuilder
                ->getQuery()
                ->getResult();
        }
        return $this->createQueryBuilder('q')
            ->where('q.title LIKE :title AND q.state != :state')
            ->orWhere('q.cod LIKE :title AND q.state != :state')
            ->setParameter('title', '%'.$title.'%')
            ->setParameter('state','только в наборе')
            ->getQuery()
            ->getResult()
            ;
    }


    public function getProductForSiteMap(){
        $q=$this->createQueryBuilder('p');
        return $q
            ->andWhere('p.state != :state')
            ->setParameter('state','Только в наборе')
            ->getQuery()
            ->getResult();
    }

    public function getRandProducts($number,$id=null)
    {
        $q=$this->createQueryBuilder('p');
        if($id){
            $q->leftJoin('p.subCategory','sc')
                ->leftJoin('sc.category','c')
                ->where('c.id = :id')
                ->setParameter('id',$id)
            ;
        }
        return $q
            ->andWhere('p.state != :state')
            ->setParameter('state','только в наборе')
            ->addSelect('RAND() as HIDDEN rand')
            ->addOrderBy('rand')
            ->setMaxResults($number)
            ->getQuery()
            ->getResult();
    }
}
